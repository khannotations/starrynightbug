@import 'libs/vars';
// Misc.
	$misc: (
		z-index-base:	10000
	);

// Duration.
	$duration: (
		navPanel: 0.5s
	);

// Size.
	$size: (
		navPanel: 275px
	);

// Font.
	$font: (
	);

// Palette.
	$palette: (
	);
@import 'libs/functions';
/// Gets a duration value.
/// @param {string} $keys Key(s).
/// @return {string} Value.
@function _duration($keys...) {
	@return val($duration, $keys...);
}

/// Gets a font value.
/// @param {string} $keys Key(s).
/// @return {string} Value.
@function _font($keys...) {
	@return val($font, $keys...);
}

/// Gets a misc value.
/// @param {string} $keys Key(s).
/// @return {string} Value.
@function _misc($keys...) {
	@return val($misc, $keys...);
}

/// Gets a palette value.
/// @param {string} $keys Key(s).
/// @return {string} Value.
@function _palette($keys...) {
	@return val($palette, $keys...);
}

/// Gets a size value.
/// @param {string} $keys Key(s).
/// @return {string} Value.
@function _size($keys...) {
	@return val($size, $keys...);
}
@import 'libs/mixins';
/// Makes an element's :before pseudoelement a FontAwesome icon.
/// @param {string} $content Optional content value to use.
@mixin icon($content: false) {

	text-decoration: none;

	&:before {

		@if $content {
			content: $content;
		}

		-moz-osx-font-smoothing: grayscale;
		-webkit-font-smoothing: antialiased;
		font-family: FontAwesome;
		font-style: normal;
		font-weight: normal;
		text-transform: none !important;

	}

}

/// Applies padding to an element, taking the current element-margin value into account.
/// @param {mixed} $tb Top/bottom padding.
/// @param {mixed} $lr Left/right padding.
/// @param {list} $pad Optional extra padding (in the following order top, right, bottom, left)
/// @param {bool} $important If true, adds !important.
@mixin padding($tb, $lr, $pad: (0,0,0,0), $important: null) {

	@if $important {
		$important: '!important';
	}

	padding: ($tb + nth($pad,1)) ($lr + nth($pad,2)) max(0.1em, $tb - _size(element-margin) + nth($pad,3)) ($lr + nth($pad,4)) #{$important};

}
@charset "UTF-8";
@import url('http://fonts.googleapis.com/css?family=Source+Sans+Pro:300,300italic,400,600');
@import url('font-awesome.min.css');

/*
	Overflow by HTML5 UP
	html5up.net | @n33co
	Free for personal and commercial use under the CCA 3.0 license (html5up.net/license)
*/

	@import "libs/skel";
	// skel.scss v3.0.0-dev | (c) n33 | skel.io | MIT licensed */

// Vars.

	/// Breakpoints.
	/// @var {list}
	$breakpoints: () !global;

	/// Vendor prefixes.
	/// @var {list}
	$vendor-prefixes: (
		'-moz-',
		'-webkit-',
		'-ms-',
		''
	);

	/// Properties that should be vendorized.
	/// @var {list}
	$vendor-properties: (
		'align-content',
		'align-items',
		'align-self',
		'animation',
		'animation-delay',
		'animation-direction',
		'animation-duration',
		'animation-fill-mode',
		'animation-iteration-count',
		'animation-name',
		'animation-play-state',
		'animation-timing-function',
		'appearance',
		'backface-visibility',
		'box-sizing',
		'filter',
		'flex',
		'flex-basis',
		'flex-direction',
		'flex-flow',
		'flex-grow',
		'flex-shrink',
		'flex-wrap',
		'justify-content',
		'order',
		'perspective',
		'pointer-events',
		'transform',
		'transform-origin',
		'transform-style',
		'transition',
		'transition-delay',
		'transition-duration',
		'transition-property',
		'transition-timing-function'
	);

	/// Values that should be vendorized.
	/// @var {list}
	$vendor-values: (
		'filter',
		'flex',
		'linear-gradient',
		'radial-gradient',
		'transform'
	);

// Functions.

	/// Removes a specific item from a list.
	/// @author Hugo Giraudel
	/// @param {list} $list List.
	/// @param {integer} $index Index.
	/// @return {list} Updated list.
	@function remove-nth($list, $index) {

		$result: null;

		@if type-of($index) != number {
			@warn "$index: #{quote($index)} is not a number for `remove-nth`.";
		}
		@else if $index == 0 {
			@warn "List index 0 must be a non-zero integer for `remove-nth`.";
		}
		@else if abs($index) > length($list) {
			@warn "List index is #{$index} but list is only #{length($list)} item long for `remove-nth`.";
		}
		@else {

			$result: ();
			$index: if($index < 0, length($list) + $index + 1, $index);

			@for $i from 1 through length($list) {

				@if $i != $index {
					$result: append($result, nth($list, $i));
				}

			}

		}

		@return $result;

	}

	/// Replaces a substring within another string.
	/// @author Hugo Giraudel
	/// @param {string} $string String.
	/// @param {string} $search Substring.
	/// @param {string} $replace Replacement.
	/// @return {string} Updated string.
	@function str-replace($string, $search, $replace: '') {

		$index: str-index($string, $search);

		@if $index {
			@return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
		}

		@return $string;

	}

	/// Replaces a substring within each string in a list.
	/// @param {list} $strings List of strings.
	/// @param {string} $search Substring.
	/// @param {string} $replace Replacement.
	/// @return {list} Updated list of strings.
	@function str-replace-all($strings, $search, $replace: '') {

		@each $string in $strings {
			$strings: set-nth($strings, index($strings, $string), str-replace($string, $search, $replace));
		}

		@return $strings;

	}

	/// Gets a value from a map.
	/// @author Hugo Giraudel
	/// @param {map} $map Map.
	/// @param {string} $keys Key(s).
	/// @return {string} Value.
	@function val($map, $keys...) {

		@if nth($keys, 1) == null {
			$keys: remove-nth($keys, 1);
		}

		@each $key in $keys {
			$map: map-get($map, $key);
		}

		@return $map;

	}

// Mixins.

	/// Sets the global box model.
	/// @param {string} $model Model (default is content).
	@mixin boxModel($model: 'content') {

		$x: $model + '-box';

		*, *:before, *:after {
			-moz-box-sizing: #{$x};
			-webkit-box-sizing: #{$x};
			box-sizing: #{$x};
		}

	}

	/// Wraps @content in a @media block using a given breakpoint.
	/// @param {string} $breakpoint Breakpoint.
	/// @param {map} $queries Additional queries.
	@mixin breakpoint($breakpoint: null, $queries: null) {

		$query: 'screen';

		// Breakpoint.
			@if $breakpoint and map-has-key($breakpoints, $breakpoint) {
				$query: $query + ' and ' + map-get($breakpoints, $breakpoint);
			}

		// Queries.
			@if $queries {
				@each $k, $v in $queries {
					$query: $query + ' and (' + $k + ':' + $v + ')';
				}
			}

        @media #{$query} {
            @content;
        }

	}

	/// Wraps @content in a @media block targeting a specific orientation.
	/// @param {string} $orientation Orientation.
	@mixin orientation($orientation) {
		@media screen and (orientation: #{$orientation}) {
			@content;
		}
	}

	/// Utility mixin for containers.
	/// @param {mixed} $width Width.
	@mixin containers($width) {

		// Locked?
			$lock: false;

			@if length($width) == 2 {
				$width: nth($width, 1);
				$lock: true;
			}

		// Modifiers.
			.container.\31 25\25		{ width: 100%; max-width: $width * 1.25; min-width: $width; }
			.container.\37 5\25			{ width: $width * 0.75; }
			.container.\35 0\25			{ width: $width * 0.5; }
			.container.\32 5\25			{ width: $width * 0.25; }

		// Main class.
			.container {
				@if $lock {
					width: $width !important;
				}
				@else {
					width: $width;
				}
			}

	}

	/// Utility mixin for grid.
	/// @param {list} $gutters Column and row gutters (default is 40px).
	/// @param {string} $breakpointName Optional breakpoint name.
	@mixin grid($gutters: 40px, $breakpointName: null) {

		// Gutters.
			@include grid-gutters($gutters);
			@include grid-gutters($gutters, \32 00\25, 2);
			@include grid-gutters($gutters, \31 50\25, 1.5);
			@include grid-gutters($gutters, \35 0\25, 0.5);
			@include grid-gutters($gutters, \32 5\25, 0.25);

		// Cells.
			$x: '';

			@if $breakpointName {
				$x: '\\28' + $breakpointName + '\\29';
			}

			.\31 2u#{$x}, .\31 2u\24#{$x} { width: 100%; clear: none; margin-left: 0; }
			.\31 1u#{$x}, .\31 1u\24#{$x} { width: 91.6666666667%; clear: none; margin-left: 0; }
			.\31 0u#{$x}, .\31 0u\24#{$x} { width: 83.3333333333%; clear: none; margin-left: 0; }
			.\39 u#{$x}, .\39 u\24#{$x} { width: 75%; clear: none; margin-left: 0; }
			.\38 u#{$x}, .\38 u\24#{$x} { width: 66.6666666667%; clear: none; margin-left: 0; }
			.\37 u#{$x}, .\37 u\24#{$x} { width: 58.3333333333%; clear: none; margin-left: 0; }
			.\36 u#{$x}, .\36 u\24#{$x} { width: 50%; clear: none; margin-left: 0; }
			.\35 u#{$x}, .\35 u\24#{$x} { width: 41.6666666667%; clear: none; margin-left: 0; }
			.\34 u#{$x}, .\34 u\24#{$x} { width: 33.3333333333%; clear: none; margin-left: 0; }
			.\33 u#{$x}, .\33 u\24#{$x} { width: 25%; clear: none; margin-left: 0; }
			.\32 u#{$x}, .\32 u\24#{$x} { width: 16.6666666667%; clear: none; margin-left: 0; }
			.\31 u#{$x}, .\31 u\24#{$x} { width: 8.3333333333%; clear: none; margin-left: 0; }

			.\31 2u\24#{$x} + *,
			.\31 1u\24#{$x} + *,
			.\31 0u\24#{$x} + *,
			.\39 u\24#{$x} + *,
			.\38 u\24#{$x} + *,
			.\37 u\24#{$x} + *,
			.\36 u\24#{$x} + *,
			.\35 u\24#{$x} + *,
			.\34 u\24#{$x} + *,
			.\33 u\24#{$x} + *,
			.\32 u\24#{$x} + *,
			.\31 u\24#{$x} + * {
				clear: left;
			}

			.\-11u#{$x} { margin-left: 91.6666666667% }
			.\-10u#{$x} { margin-left: 83.3333333333% }
			.\-9u#{$x} { margin-left: 75% }
			.\-8u#{$x} { margin-left: 66.6666666667% }
			.\-7u#{$x} { margin-left: 58.3333333333% }
			.\-6u#{$x} { margin-left: 50% }
			.\-5u#{$x} { margin-left: 41.6666666667% }
			.\-4u#{$x} { margin-left: 33.3333333333% }
			.\-3u#{$x} { margin-left: 25% }
			.\-2u#{$x} { margin-left: 16.6666666667% }
			.\-1u#{$x} { margin-left: 8.3333333333% }

	}

	/// Utility mixin for grid.
	/// @param {list} $gutters Gutters.
	/// @param {string} $class Optional class name.
	/// @param {integer} $multiplier Multiplier (default is 1).
	@mixin grid-gutters($gutters, $class: null, $multiplier: 1) {

		// Expand gutters if it's not a list.
			@if length($gutters) == 1 {
				$gutters: ($gutters, 0);
			}

		// Get column and row gutter values.
			$c: nth($gutters, 1);
			$r: nth($gutters, 2);

		// Get class (if provided).
			$x: '';

			@if $class {
				$x: '.' + $class;
			}

		// Default.
			.row#{$x} > * { padding: ($r * $multiplier) 0 0 ($c * $multiplier); }
			.row#{$x} { margin: ($r * $multiplier * -1) 0 -1px ($c * $multiplier * -1); }

		// Uniform.
			.row.uniform#{$x} > * { padding: ($c * $multiplier) 0 0 ($c * $multiplier); }
			.row.uniform#{$x} { margin: ($c * $multiplier * -1) 0 -1px ($c * $multiplier * -1); }

	}

	/// Wraps @content in vendorized keyframe blocks.
	/// @param {string} $name Name.
	@mixin keyframes($name) {

		@-moz-keyframes #{$name} { @content; }
		@-webkit-keyframes #{$name} { @content; }
		@-ms-keyframes #{$name} { @content; }
		@keyframes #{$name} { @content; }

	}

	///
	/// Sets breakpoints.
	/// @param {map} $x Breakpoints.
	///
	@mixin skel-breakpoints($x: ()) {
		$breakpoints: $x !global;
	}

	///
	/// Initializes layout module.
	/// @param {map} config Config.
	///
	@mixin skel-layout($config: ()) {

		// Config.
			$configPerBreakpoint: ();

			$z: map-get($config, 'breakpoints');

			@if $z {
				$configPerBreakpoint: $z;
			}

		// Reset.
			$x: map-get($config, 'reset');

			@if $x {

				/* Reset */

				@include reset($x);

			}

		// Box model.
			$x: map-get($config, 'boxModel');

			@if $x {

				/* Box Model */

				@include boxModel($x);

			}

		// Containers.
			$containers: map-get($config, 'containers');

			@if $containers {

				/* Containers */

				.container {
					margin-left: auto;
					margin-right: auto;
				}

				// Use default is $containers is just "true".
					@if $containers == true {
						$containers: 960px;
					}

				// Apply base.
					@include containers($containers);

				// Apply per-breakpoint.
					@each $name in map-keys($breakpoints) {

						// Get/use breakpoint setting if it exists.
							$x: map-get($configPerBreakpoint, $name);

							// Per-breakpoint config exists?
								@if $x {
									$y: map-get($x, 'containers');

									// Setting exists? Use it.
										@if $y {
											$containers: $y;
										}

								}

						// Create @media block.
							@media screen and #{map-get($breakpoints, $name)} {
								@include containers($containers);
							}

					}

			}

		// Grid.
			$grid: map-get($config, 'grid');

			@if $grid {

				/* Grid */

				// Use defaults if $grid is just "true".
					@if $grid == true {
						$grid: ();
					}

				// Sub-setting: Gutters.
					$grid-gutters: 40px;
					$x: map-get($grid, 'gutters');

					@if $x {
						$grid-gutters: $x;
					}

				// Rows.
					.row {
						border-bottom: solid 1px transparent;
						-moz-box-sizing: border-box;
						-webkit-box-sizing: border-box;
						box-sizing: border-box;
					}

					.row > * {
						float: left;
						-moz-box-sizing: border-box;
						-webkit-box-sizing: border-box;
						box-sizing: border-box;
					}

					.row:after, .row:before {
						content: '';
						display: block;
						clear: both;
						height: 0;
					}

					.row.uniform > * > :first-child {
						margin-top: 0;
					}

					.row.uniform > * > :last-child {
						margin-bottom: 0;
					}

				// Gutters (0%).
					@include grid-gutters($grid-gutters, \30 \25, 0);

				// Apply base.
					@include grid($grid-gutters);

				// Apply per-breakpoint.
					@each $name in map-keys($breakpoints) {

						// Get/use breakpoint setting if it exists.
							$x: map-get($configPerBreakpoint, $name);

							// Per-breakpoint config exists?
								@if $x {
									$y: map-get($x, 'grid');

									// Setting exists?
										@if $y {

											// Sub-setting: Gutters.
												$x: map-get($y, 'gutters');

												@if $x {
													$grid-gutters: $x;
												}

										}

								}

						// Create @media block.
							@media screen and #{map-get($breakpoints, $name)} {
								@include grid($grid-gutters, $name);
							}

					}

			}

	}

	/// Resets browser styles.
	/// @param {string} $mode Mode (default is 'normalize').
	@mixin reset($mode: 'normalize') {

		@if $mode == 'normalize' {

			// normalize.css v3.0.2 | MIT License | git.io/normalize
				html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}article,aside,details,figcaption,figure,footer,header,hgroup,main,menu,nav,section,summary{display:block}audio,canvas,progress,video{display:inline-block;vertical-align:baseline}audio:not([controls]){display:none;height:0}[hidden],template{display:none}a{background-color:transparent}a:active,a:hover{outline:0}abbr[title]{border-bottom:1px dotted}b,strong{font-weight:700}dfn{font-style:italic}h1{font-size:2em;margin:.67em 0}mark{background:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sup{top:-.5em}sub{bottom:-.25em}img{border:0}svg:not(:root){overflow:hidden}figure{margin:1em 40px}hr{-moz-box-sizing:content-box;box-sizing:content-box;height:0}pre{overflow:auto}code,kbd,pre,samp{font-family:monospace,monospace;font-size:1em}button,input,optgroup,select,textarea{color:inherit;font:inherit;margin:0}button{overflow:visible}button,select{text-transform:none}button,html input[type=button],input[type=reset],input[type=submit]{-webkit-appearance:button;cursor:pointer}button[disabled],html input[disabled]{cursor:default}button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}input{line-height:normal}input[type=checkbox],input[type=radio]{box-sizing:border-box;padding:0}input[type=number]::-webkit-inner-spin-button,input[type=number]::-webkit-outer-spin-button{height:auto}input[type=search]{-webkit-appearance:textfield;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;box-sizing:content-box}input[type=search]::-webkit-search-cancel-button,input[type=search]::-webkit-search-decoration{-webkit-appearance:none}fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}legend{border:0;padding:0}textarea{overflow:auto}optgroup{font-weight:700}table{border-collapse:collapse;border-spacing:0}td,th{padding:0}

		}
		@else if $mode == 'full' {

			// meyerweb.com/eric/tools/css/reset v2.0 | 20110126 | License: none (public domain)
				html,body,div,span,applet,object,iframe,h1,h2,h3,h4,h5,h6,p,blockquote,pre,a,abbr,acronym,address,big,cite,code,del,dfn,em,img,ins,kbd,q,s,samp,small,strike,strong,sub,sup,tt,var,b,u,i,center,dl,dt,dd,ol,ul,li,fieldset,form,label,legend,table,caption,tbody,tfoot,thead,tr,th,td,article,aside,canvas,details,embed,figure,figcaption,footer,header,hgroup,menu,nav,output,ruby,section,summary,time,mark,audio,video{margin:0;padding:0;border:0;font-size:100%;font:inherit;vertical-align:baseline;}article,aside,details,figcaption,figure,footer,header,hgroup,menu,nav,section{display:block;}body{line-height:1;}ol,ul{list-style:none;}blockquote,q{quotes:none;}blockquote:before,blockquote:after,q:before,q:after{content:'';content:none;}table{border-collapse:collapse;border-spacing:0;}body{-webkit-text-size-adjust:none}

		}

	}

	/// Vendorizes a declaration's property and/or value(s).
	/// @param {string} $property Property.
	/// @param {mixed} $value String/list of value(s).
	@mixin vendor($property, $value) {

		// Determine if property should expand.
			$expandProperty: index($vendor-properties, $property);

		// Determine if value should expand (and if so, add '-prefix-' placeholder).
			$expandValue: false;

			@each $x in $value {
				@each $y in $vendor-values {
					@if $y == str-slice($x, 1, str-length($y)) {

						$value: set-nth($value, index($value, $x), '-prefix-' + $x);
						$expandValue: true;

					}
				}
			}

		// Expand property?
			@if $expandProperty {
			    @each $vendor in $vendor-prefixes {
			        #{$vendor}#{$property}: #{str-replace-all($value, '-prefix-', $vendor)};
			    }
			}

		// Expand just the value?
			@elseif $expandValue {
			    @each $vendor in $vendor-prefixes {
			        #{$property}: #{str-replace-all($value, '-prefix-', $vendor)};
			    }
			}

		// Neither? Treat them as a normal declaration.
			@else {
		        #{$property}: #{$value};
			}

	}

	@include skel-breakpoints((
		wide: '(max-width: 1680px)',
		normal: '(max-width: 1080px)',
		narrow: '(max-width: 840px)',
		mobile: '(max-width: 736px)'
	));

	@include skel-layout((
		reset: 'full',
		boxModel: 'border',
		grid: ( gutters: (40px, 40px) ),
		conditionals: true,
		containers: 1140px,
		breakpoints: (
			wide: (
				containers: 960px,
			),
			normal: (
				containers: 95%,
			),
			narrow: (
				grid: (
					gutters: (30px, 30px)
				),
			),
			mobile: (
				containers: (95%, true),
				grid: (
					gutters: (20px, 20px)
				),
			)
		)
	));

/* Basic */

	body {
		background-color: #183026;
		background-image: url('images/overlay.png'), url('../../images/bg.jpg');
		background-repeat: repeat, no-repeat;
		background-size: auto, cover;
		background-position: top left, center 0;
		background-attachment: fixed, fixed;
		font-family: 'Source Sans Pro', sans-serif;
		font-size: 18pt;
		line-height: 1.75em;
		font-weight: 300;
		letter-spacing: 1px;
		color: #3a3939;
		text-shadow: 0 0 0.5px rgba(58, 57, 57, 0.25);
		-webkit-text-stroke: 0.25px;

		&.is-scroll {
			background-attachment: scroll, scroll;
			background-size: auto, 100% auto;
		}

		&.is-loading * {
			@include vendor('transition', 'none !important');
			@include vendor('animation', 'none !important');
		}
	}

	input, textarea, select {
		font-family: 'Source Sans Pro', sans-serif;
		font-size: 18pt;
		line-height: 1.75em;
		font-weight: 300;
		letter-spacing: 1px;
		color: #3a3939;
		text-shadow: 0 0 0.5px rgba(58, 57, 57, 0.25);
		-webkit-text-stroke: 0.25px;
	}

	h1, h2, h3, h4, h5, h6 {
		font-weight: 400;
		text-transform: uppercase;
		line-height: 1.75em;
	}

	h1 a, h2 a, h3 a, h4 a, h5 a, h6 a {
		color: inherit;
		text-decoration: none;
	}

	h2 {
		font-size: 1.25em;
		letter-spacing: 8px;
	}

	h3 {
		font-size: 1em;
		letter-spacing: 5px;
	}

	strong, b {
		font-weight: 400;
	}

	em, i {
		font-style: italic;
	}

	a {
		@include vendor('transition', ('border-color 0.35s ease-in-out', 'color 0.35s ease-in-out'));
		color: #35b88f;
		text-shadow: 0 0 0.5px rgba(53, 184, 143, 0.25);
		text-decoration: none;
		border-bottom: dotted 1px rgba(53, 184, 143, 0.5);

		&:hover {
			border-bottom-color: rgba(53, 184, 143, 0);
		}
	}

	sub {
		position: relative;
		top: 0.5em;
		font-size: 0.8em;
	}

	sup {
		position: relative;
		top: -0.5em;
		font-size: 0.8em;
	}

	hr {
		border: 0;
		border-top: solid 1px #dad9d9;
		margin: 2em 0 2em 0;
	}

	blockquote {
		border-left: solid 0.5em #eae9e9;
		padding: 1em 0 1em 2em;
		font-style: italic;
	}

	p, ul, ol, dl, table {
		margin-bottom: 1em;
	}

	header {
		margin-bottom: 1em;

		p {
			display: block;
			margin: 0.5em 0 0 0;
			padding: 0 0 1.5em 0;
		}
	}

	footer {
		margin-top: 1em;
	}

	br.clear {
		clear: both;
	}

/* Sections/Article */

	section, article {
		margin-bottom: 3em;
	}

	section > :last-child,
	article > :last-child,
	section:last-child,
	article:last-child {
		margin-bottom: 0;
	}

	.row > {
		section, article {
			margin-bottom: 0;
		}
	}

/* Image */

	.image {
		display: inline-block;
		border: 0;

		img {
			display: block;
			width: 100%;
		}

		&.featured {
			display: block;
			width: 100%;
			margin: 0 0 2em 0;
		}

		&.fit {
			display: block;
			width: 100%;
		}

		&.left {
			float: left;
			margin: 0 2em 2em 0;
		}

		&.centered {
			display: block;
			margin: 0 0 2em 0;

			img {
				margin: 0 auto;
				width: auto;
			}
		}
	}

/* List */

	ul {
		&.default {
			list-style: disc;
			padding-left: 1em;

			li {
				padding-left: 1.5em;
				margin-top: 1.5em;

				&:first-child {
					margin-top: 0;
				}
			}
		}

		&.icons {
			cursor: default;

			li {
				display: inline-block;
			}

			a {
				display: inline-block;
				width: 2.5em;
				height: 2.5em;
				line-height: 2.5em;
				text-align: center;
				border: 0;
			}
		}

		&.menu {
			cursor: default;

			li {
				display: inline-block;
				line-height: 1em;
				border-left: solid 1px #dad9d9;
				padding: 0 0 0 0.5em;
				margin: 0 0 0 0.5em;

				&:first-child {
					border-left: 0;
					padding-left: 0;
					margin-left: 0;
				}
			}
		}

		&.actions {
			cursor: default;

			li {
				display: inline-block;
				margin: 0 0 0 0.5em;

				&:first-child {
					margin-left: 0;
				}
			}
		}
	}

	ol {
		&.default {
			list-style: decimal;
			padding-left: 1.25em;

			li {
				padding-left: 1.25em;
				margin-top: 1.5em;
			}
		}
	}

/* Form */

	form {
		label {
			display: block;
			margin: 0 0 0.5em 0;
		}

		input[type="text"],
		input[type="email"],
		input[type="password"],
		select,
		textarea {
			@include vendor('transition', 'background-color 0.35s ease-in-out');
			-webkit-appearance: none;
			display: block;
			border: 0;
			background: #f1f1f1;
			width: 100%;
			padding: 0.75em;

			&:focus {
				background: #f8f8f8;
			}
		}

		input[type="text"],
		input[type="email"],
		input[type="password"],
		select {
			line-height: 1em;
		}

		textarea {
			min-height: 12em;
		}

		.formerize-placeholder {
			color: #5a5959 !important;
		}

		::-webkit-input-placeholder {
			color: #5a5959 !important;
		}

		:-moz-placeholder {
			color: #5a5959 !important;
		}

		::-moz-placeholder {
			color: #5a5959 !important;
		}

		:-ms-input-placeholder {
			color: #5a5959 !important;
		}

		::-moz-focus-inner {
			border: 0;
		}

		ul {
			&.actions {
				margin-bottom: 0;
				text-align: center;
			}
		}
	}

/* Table */

	.table-wrapper {
		width: 100%;
		overflow-x: auto;
		-webkit-overflow-scrolling: touch;
	}

	table {
		width: 100%;

		&.default {
			width: 100%;

			tbody {
				tr {
					border-top: solid 1px #eae9e9;

					&:first-child {
						border-top: 0;
					}
				}
			}

			td {
				padding: 0.75em 1.25em 0.75em 1.25em;
			}

			th {
				text-align: left;
				font-weight: 400;
				padding: 0.75em 1.25em 0.75em 1.25em;
			}

			thead {
				background: #f5f5f5;
			}
		}
	}

/* Button */

	input[type="button"],
	input[type="submit"],
	input[type="reset"],
	button,
	.button {
		@include vendor('transition', ('background-color 0.35s ease-in-out', 'color 0.35s ease-in-out'));
		-webkit-appearance: none;
		position: relative;
		display: inline-block;
		border: 0;
		background: #35b88f;
		color: #fff;
		text-shadow: 0 0 0.5px rgba(255, 255, 255, 0.25);
		cursor: pointer;
		text-decoration: none;
		outline: 0;
		padding: 1em 3em 1em 3em;
		text-align: center;
		border-radius: 3em;
		font-weight: 400;

		&:hover {
			background: #45c89f;
		}

		&.style2 {
			color: #3a3939;
			background: #fff;
			box-shadow: inset 0 0 0 1px #fff;

			&:hover {
				background: rgba(255, 255, 255, 0.1);
				color: #fff !important;
				text-shadow: 0 0 0.5px rgba(255, 255, 255, 0.25) !important;
			}
		}

		&.style3 {
			background: none;
			color: #3a3939;
			box-shadow: inset 0 0 0 1px #dad9d9;

			&:hover {
				background: rgba(58, 57, 57, 0.025);
			}
		}
	}

/* Box */

	.box {
		position: relative;
		margin-top: 9em;
		margin-bottom: 0;

		&:after {
			content: '';
			display: block;
			position: absolute;
			top: -9em;
			left: 50%;
			height: 9em;
			border-left: solid 1px #fff;
		}

		&:before {
			content: '';
			display: block;
			width: 90px;
			height: 66px;
			position: absolute;
			left: 50%;
			top: -4.5em;
			margin-left: -45px;
			margin-top: -33px;
			background: url('images/arrow.svg') no-repeat;
		}

		:last-child {
			margin-bottom: 0;
		}

		&.style1 {
			background: #fff;
			padding: 3em;

			.image {
				display: block;
				position: absolute;
				top: 0;
				width: 50%;
				height: 100%;
				background: #152E33;
				overflow: hidden;

				img {
					position: absolute;
					top: 0;
					height: 100%;
					width: auto;
				}
			}

			.inner {
				> :last-child {
					margin: 0;
				}
			}

			&.right {
				.image {
					left: 0;

					img {
						right: 0;
					}
				}

				.inner {
					margin-left: 50%;
					padding-left: 3em;
				}
			}

			&.left {
				.image {
					right: 0;

					img {
						left: 0;
					}
				}

				.inner {
					margin-right: 50%;
					padding-right: 3em;
				}
			}
		}

		&.style2 {
			text-align: center;

			header {
				display: inline-block;
				background: #fff;
				padding: 2em 3em 2em 3em;
				margin: 0;

				p {
					padding: 0;
				}
			}

			.inner {
				position: relative;
				padding: 40px 0 0px 0;

				&:after {
					content: '';
					display: block;
					position: absolute;
					top: 0;
					left: 50%;
					height: 100%;
					border-left: solid 1px #fff;
				}

				.row {
					position: relative;

					&:before {
						content: '';
						display: block;
						position: absolute;
						top: 50%;
						left: 20px;
						width: calc(100% - 40px);
						border-bottom: solid 1px #fff;
					}
				}

				.image {
					position: relative;
					z-index: 1;
					padding: 20px;
				}
			}
		}

		&.style3 {
			background: #fff;
			padding: 3em;

			header {
				text-align: center;
			}
		}
	}

/* Icons */

	.icon {
		text-decoration: none;

		&:before {
			display: inline-block;
			font-family: FontAwesome;
			font-size: 1.25em;
			text-decoration: none;
			font-style: normal;
			font-weight: normal;
			line-height: 1;
			-webkit-font-smoothing: antialiased;
			-moz-osx-font-smoothing: grayscale;
		}

		> .label {
			display: none;
		}
	}

/* Header */

	#header {
		position: relative;
		color: #fff;
		text-shadow: 0 0 0.5px rgba(255, 255, 255, 0.25);
		text-align: center;
		margin: 0;
		padding: 14em 0 14em 0;
		cursor: default;

		header {
			display: inline-block;
			padding: 0 0 4.5em 0;

			h1 {
				font-weight: 600;
				font-size: 2em;
				letter-spacing: 10px;
			}

			p {
				border-top: solid 1px rgba(255, 255, 255, 0.5);
				color: rgba(255, 255, 255, 0.75);
				text-shadow: 0 0 0.5px rgba(255, 255, 255, 0.1875);
				font-size: 1em;
				text-transform: uppercase;
				letter-spacing: 3px;
				padding: 0;
				margin-top: 0.35em;

				&:before {
					content: '';
					display: block;
					border-top: solid 1px rgba(255, 255, 255, 0.5);
					margin: 4px 0 0.8em 0;
				}
			}
		}

		footer {
			position: absolute;
			bottom: 9em;
			margin: 0;
			width: 100%;

			&:after {
				content: '';
				display: block;
				position: absolute;
				bottom: -9em;
				left: 50%;
				height: 9em;
				border-left: solid 1px #fff;
			}

			&:before {
				content: '';
				display: block;
				width: 90px;
				height: 66px;
				position: absolute;
				left: 50%;
				bottom: -4.5em;
				margin-left: -45px;
				margin-bottom: -33px;
				background: url('images/arrow.svg') no-repeat;
			}
		}
	}

/* Banner */

	#banner {
		position: relative;
		color: #fff;
		text-shadow: 0 0 0.5px rgba(255, 255, 255, 0.25);
		text-align: center;
		background: #35b88f url('images/banner.svg') bottom center no-repeat;
		padding: 5em 0 5em 0;
		margin: 0;
		background-size: 125% auto;

		.button {
			color: #35b882;
			text-shadow: 0 0 0.5px rgba(53, 184, 130, 0.25);
		}

		header {
			margin: 0 0 2em 0;

			h2 {
				font-weight: 400;
				font-size: 1.75em;
				letter-spacing: 8px;
			}
		}

		p {
			margin: 0;
		}

		footer {
			margin: 2em 0 0 0;
		}

		a {
			color: inherit;
			border-bottom-color: rgba(255, 255, 255, 0.5);

			&:hover {
				border-bottom-color: rgba(255, 255, 255, 0);
			}
		}
	}

/* Footer */

	#footer {
		position: relative;
		color: #fff;
		text-shadow: 0 0 0.5px rgba(255, 255, 255, 0.25);
		text-align: center;
		margin: 4.5em 0 0 0;

		&:after {
			content: '';
			display: block;
			position: absolute;
			top: -4.5em;
			left: 50%;
			height: 4.5em;
			border-left: solid 1px #fff;
		}

		a {
			color: #fff;
			text-shadow: 0 0 0.5px rgba(255, 255, 255, 0.25);
			border-bottom-color: rgba(255, 255, 255, 0.5);

			&:hover {
				color: #35b88f;
				text-shadow: 0 0 0.5px rgba(69, 200, 159, 0.25);
				border-bottom-color: rgba(53, 184, 143, 0.5);
			}
		}

		.icons {
			padding: 0.75em 2em 0.75em 2em;
			border-radius: 3em;
			border: solid 1px #fff;
			display: inline-block;
			margin: 0 0 3em 0;
		}

		.copyright {
			margin: 0 0 9em 0;
			font-size: 0.8em;
		}
	}

/* Poptrox */

	.poptrox-popup {
		@include vendor('box-sizing', 'content-box');
		background: #fff;
		padding-bottom: 3em;

		.loader {
			width: 48px;
			height: 48px;
			background: url('images/loader.gif');
			position: absolute;
			top: 50%;
			left: 50%;
			margin: -24px 0 0 -24px;
		}

		.caption {
			position: absolute;
			bottom: 0;
			left: 0;
			background: #fff;
			width: 100%;
			height: 3em;
			line-height: 3em;
			text-align: center;
			cursor: default;
			z-index: 1;
		}

		.nav-next,
		.nav-previous {
			@include vendor('transition', 'opacity 0.5s ease-in-out');
			position: absolute;
			top: 0;
			width: 50%;
			height: 100%;
			opacity: 0;
			cursor: pointer;
			background: rgba(0, 0, 0, 0.01);
			-webkit-tap-highlight-color: rgba(255, 255, 255, 0);

			&:before {
				content: '';
				position: absolute;
				width: 96px;
				height: 64px;
				background: url('images/poptrox-nav.svg');
				top: calc(50% - 1.5em);
				margin: -32px 0 0 0;
			}
		}

		&:hover {
			.nav-next,
			.nav-previous {
				opacity: 0.5;

				&:hover {
					opacity: 1.0;
				}
			}
		}

		.nav-next {
			right: 0;

			&:before {
				right: 0;
			}
		}

		.nav-previous {
			left: 0;

			&:before {
				@include vendor('transform', 'scaleX(-1)');
				left: 0;
				-ms-filter: "FlipH";
				filter: FlipH;
			}
		}

		.closer {
			@include vendor('transition', 'opacity 0.5s ease-in-out');
			position: absolute;
			top: 0;
			right: 0;
			width: 64px;
			height: 64px;
			text-indent: -9999px;
			z-index: 2;
			opacity: 0;
			-webkit-tap-highlight-color: rgba(255, 255, 255, 0);

			&:before {
				@include vendor('transition', 'background-color 0.5s ease-in-out');
				content: '';
				display: block;
				position: absolute;
				right: 16px;
				top: 16px;
				width: 40px;
				height: 40px;
				border-radius: 100%;
				box-shadow: inset 0 0 0 1px #fff;
				background: rgba(255, 255, 255, 0.1) url('images/poptrox-closer.svg') center center;
				color: #fff !important;
			}
		}

		&:hover {
			.closer {
				opacity: 0.5;

				&:hover {
					opacity: 1.0;
				}
			}
		}
	}

/* Wide */

	@include breakpoint(wide) {

		/* Basic */

			body, input, textarea, select {
				font-size: 16pt;
			}

	}

/* Normal */

	@include breakpoint(normal) {

		/* Banner */

			#banner {
				padding: 4em 0 4em 0;
				background-size: auto, 175% auto;
			}

	}

/* Narrow */

	@include breakpoint(narrow) {

		/* Basic */

			body {
				background-color: #203936;
				background-image: url('images/overlay.png'), url('../../images/bg-alt.jpg');
				background-repeat: repeat, no-repeat;
				background-size: auto, 100% auto;
				background-position: top left, top center;
				background-attachment: scroll, scroll;
				font-size: 14pt;
			}

			input, textarea, select {
				font-size: 14pt;
			}

			h1, h2, h3, h4, h5, h6 {
				line-height: 1.5em;
			}

			header {
				p {
					margin: 0.25em 0 0 0;
					padding: 0 0 0.5em 0;
				}
			}

		/* Box */
			.box {
				position: relative;

				section {
					margin: 0 0 2em 0;
				}

				&.style1 {
					padding: 2.5em 2em 2.5em 2em;

					&.right {
						.inner {
							padding-left: 2em;
						}
					}

					&.left {
						.inner {
							padding-right: 2em;
						}
					}
				}

				&.style2 {

					header {
						padding: 2em;
					}

					.inner {
						position: relative;
						padding: 30px 0 0 0;
					}
				}

				&.style3 {
					padding: 2.5em 2em 2.5em 2em;
				}
			}

		/* Banner */

			#banner {
				padding: 3.5em;
				background-size: 200% auto;

				br {
					display: none;
				}
			}

	}

/* Mobile */

	@include breakpoint(mobile) {

		/* Basic */

			* {
				text-shadow: none !important;
			}

			body, input, textarea, select {
				line-height: 1.5em;
				font-size: 12pt;
				letter-spacing: 0;
			}

			h2, h3, h4, h5, h6 {
				font-size: 1em;
			}

			h2 {
				font-size: 1.25em;
				letter-spacing: 4px;
			}

		/* List */

			ul {
				&.default {
					li {
						padding-left: 0.5em;
					}
				}

				&.icons {
					a {
						width: 2em;
						height: 2em;
						line-height: 2em;
					}
				}

				&.menu {
					li {
						display: block;
						padding: 0;
						border: 0;
						margin: 1em 0 0 0;

						&:first-child {
							margin-top: 0;
						}
					}
				}

				&.actions {
					li {
						display: block;
						margin: 1em 0 0 0;

						&:first-child {
							margin-top: 0;
						}
					}
				}
			}

			ol {
				&.default {
					li {
						padding-left: 0.25em;
					}
				}
			}

		/* Button */

			input[type="button"],
			input[type="submit"],
			input[type="reset"],
			button,
			.button {
				padding: 0.75em 0 0.75em 0;
				width: 100%;
				max-width: 320px;
			}

		/* Box */

			.box {
				margin-top: 4.5em;

				&:after {
					top: -4.5em;
					height: 4.5em;
				}

				&:before {
					width: 45px;
					height: 33px;
					top: -2.25em;
					margin-left: -22.5px;
					margin-top: -16.5px;
					background-size: 45px 33px;
				}

				&.style1 {
					padding: 0;
					text-align: center;

					.image {
						position: relative !important;
						left: 0 !important;
						width: 100% !important;
						height: auto !important;

						img {
							position: relative;
							height: auto;
							width: 100%;
						}
					}

					.inner {
						margin: 0 !important;
						padding: 2em 1.25em 2em 1.25em !important;
					}
				}

				&.style2 {
					.inner {
						.row:before {
							display: none;
						}

						.image {
							padding: 0;
							max-width: 250px;
							margin: 0 auto 20px auto;
						}
					}
				}

				&.style3 {
					padding: 2em 1.25em 2em 1.25em;
				}
			}

		/* Header */
			#header {
				padding: 6em 0 6em 0;

				header {
					padding-left: 2em;
					padding-right: 2em;

					h1 {
						font-size: 1.75em;
						letter-spacing: 6px;
					}
				}

				footer {
					bottom: 4.5em;
					padding: 0 2em 0 2em;

					&:after {
						bottom: -4.5em;
						left: 50%;
						height: 4.5em;
					}

					&:before {
						width: 45px;
						height: 33px;
						bottom: -2.25em;
						margin-left: -22.5px;
						margin-bottom: -16.5px;
						background-size: 45px 33px;
					}
				}
			}

		/* Banner */
			#banner {
				padding: 3em 2em 3em 2em;
				background-size: auto 150%;

				header {
					margin: 0 0 1em 0;

					h2 {
						font-size: 1.5em;
						letter-spacing: 6px;
					}
				}
			}

		/* Footer */

			#footer {
				.icons {
					padding: 0.5em 1.25em 0.5em 1.25em;
				}

				.copyright {
					font-size: 1em;
					margin: 0 0 4em 0;
				}
			}

		/* Poptrox */
			.poptrox-popup {
				.nav-next,
				.nav-previous {
					opacity: 1.0;

					&:before {
						display: none;
					}
				}

				.closer {
					opacity: 0.5;
				}
			}

	}